name: CI

on: 
  push:
    branches:
      - main
      - prod
      - feat-postgres-container-staging
    paths: 
      - 'services/**'
      - '.github/**'
  pull_request:
    branches:
      - main
      - prod
    paths: 
      - 'services/**'
      - '.github/**'

jobs:
  ci:
    name: Build and Push Docker Image, Deploy to Linode K8s
    defaults:
      run:
        working-directory: services/server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 
        with:
          sparse-checkout: |
            .github
            services
                  
      - name: Check Required variables and secrets
        run: |
          if [[ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "DOCKERHUB_TOKEN secret is missing";
            exit 1;
          fi
          if [[ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}" ]]; then
            echo "FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 secret is missing";
            exit 1;
          fi
          if [[ -z "${{ secrets.LINODE_KUBECONFIG }}" ]]; then
            echo "LINODE_KUBECONFIG secret is missing";
            exit 1;
          fi

          if [[ -z "${{ vars.DOCKERHUB_REPO }}" ]]; then
            echo "DOCKERHUB_REPO variable is missing";
            exit 1;
          fi
          if [[ -z "${{ vars.DOCKERHUB_USERNAME }}" ]]; then
            echo "DOCKERHUB_USERNAME variable is missing";
            exit 1;
          fi
          if [[ -z "${{ vars.HELM_VERSION }}" ]]; then
            echo "HELM_VERSION variable is missing";
            exit 1;
          fi

      - name: Set Environment Variables
        run: |
          if [[ ${{ github.ref_name }} == 'prod' ]]; then 
            ENVIRONMENT='prod'
          elif [[ ${{ github.ref_name }} == 'main' ]]; then
            ENVIRONMENT='staging'
          else 
            ENVIRONMENT='test'
          fi

          IMAGE_REPO=${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}
          IMAGE_TAG="$ENVIRONMENT-${{ github.sha }}"

          echo "ENVIRONMENT=$ENVIRONMENT" >> $GITHUB_ENV
          echo "IMAGE_REPO=$IMAGE_REPO" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "IMAGE=$IMAGE_REPO:$IMAGE_TAG" >> $GITHUB_ENV

      - uses: azure/k8s-set-context@v4  
        with:
          kubeconfig: ${{ secrets.LINODE_KUBECONFIG }} # must be the kubeconfig itself, not the path to it

      - uses: azure/setup-helm@v4.1.0
        with:
          version: "${{ vars.HELM_VERSION }}"

      - name: Build the Docker Image # different FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 secret for prod and staging
        run: |
          docker build \
          -f Dockerfile.prod \
          -t ${{ env.IMAGE }} \
          --build-arg FIREBASE_SERVICE_ACCOUNT_KEY_BASE64=$( if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; else echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; fi ) \
          .

      - name: Login to Docker Hub 
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push the Docker Image 
        run: docker push ${{ env.IMAGE }}

      - name: Adapt app version in Helm Chart 
        run: |
          sed -i'' \
          -e "s/APP_VERSION/${{ github.sha }}/g" \
          k8s/server/Chart.yaml

# TODO add --set postgresql.enabled=$( if [[ ${{ env.ENVIRONMENT }} == 'staging' ]]; then echo true; else echo false; fi ) \
      - name: Apply Helm Chart
        run: |
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm dependency build k8s/server
          helm upgrade server-${{ env.ENVIRONMENT }} k8s/server \
          --install \
          --set image.repository=${{ env.IMAGE_REPO }} \
          --set image.tag=${{ env.IMAGE_TAG }} \
          --set replicaCount=1 \
          --set secrets.dockerHubSecret.valueBase64="$(cat ~/.docker/config.json | base64 -w 0)" \
          --set postgresql.enabled=true \
          --namespace=${{ env.ENVIRONMENT }}

# TODO: health check and rollback on failure
      - name: Delete old Images on Docker Hub # different env vars (REGEX, DAYS_AGO, NTH_NEWEST)
        run: |
          if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          else
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          fi
        env:
          REGEX: "${{ env.ENVIRONMENT }}-"
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_REPO: ${{ vars.DOCKERHUB_REPO }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}