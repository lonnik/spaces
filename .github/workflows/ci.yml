name: CI

on: 
  push:
    branches:
      - main
      - prod
    paths: 
      - 'server/**'
      - '.github/**'
  pull_request:
    branches:
      - main
      - prod
    paths: 
      - 'server/**'
      - '.github/**'

jobs:
  select-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.select-environment.outputs.environment }}
    steps:
      - name: Select Environment
        id: select-environment
        run: |
          if [[ ${{ github.ref_name }} == 'prod' ]]; then 
            echo "environment=prod" >> "$GITHUG_OUTPUT"
          else
            echo "environment=staging" >> "$GITHUG_OUTPUT"
          fi
          
  build-and-push:
    name: Build and Push Docker Image
    needs: select-environment
    env: # same for prod and staging
      ENVIRONMENT: ${{ needs.select-environment.outputs.environment }}
      IMAGE: "${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}:${{ needs.select-environment.outputs.environment }}-${{ github.sha }}"
    defaults:
      run:
        working-directory: server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 # same
        with:
          sparse-checkout: |
            .github
            server
        
      - uses: azure/k8s-set-context@v4 # same 
        with:
          kubeconfig: ${{ secrets.LINODE_KUBECONFIG }} # must be the kubeconfig itself, not the path to it

      - name: Build the Docker Image # same (different FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 secret)
        run: docker build -f Dockerfile.prod -t ${{ env.IMAGE }} --build-arg FIREBASE_SERVICE_ACCOUNT_KEY_BASE64="$( if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then echo ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; else echo ${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; fi )" .

      - name: Login to Docker Hub # same
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push the Docker Image # same
        run: docker push ${{ env.IMAGE }}

      - name: Create Dockerhub secret # same with different namespace
        run: |
          sed -i'' \
          -e "s/DOCKERHUB_SECRET/$(cat ~/.docker/config.json | base64 -w 0)/g" \
          k8s/spaces-dockerhub_secret.yml
          kubectl apply -f k8s/spaces-dockerhub_secret.yml --namespace="${{ env.ENVIRONMENT }}"

      - name: Apply Deployment # different namespace, deployment file
        run: |
          sed -i'' \
          -e "s|DOCKERHUB_IMAGE|${{ env.IMAGE }}|g" \
          "${{ env.DEPLOYMENT_MANIFEST_PATH }}"
          kubectl apply -f "${{ env.DEPLOYMENT_MANIFEST_PATH }}" --namespace="${{ env.ENVIRONMENT }}"
        env:
          DEPLOYMENT_MANIFEST_PATH: "k8s/${{ env.ENVIRONMENT }}/spaces_deploy.yml"

      - name: Apply Service # different namespace, service file
        run: kubectl apply -f k8s/spaces_svc.yml --namespace="${{ env.ENVIRONMENT }}"

      - name: Delete old Images on Docker Hub # different env vars (REGEX, DAYS_AGO, NTH_NEWEST)
        run: |
          if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          else
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          fi
        env:
          REGEX: "${{ env.ENVIRONMENT }}-"
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_REPO: ${{ vars.DOCKERHUB_REPO }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}