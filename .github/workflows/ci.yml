name: CI

on: 
  push:
    branches:
      - main
      - prod
    paths: 
      - 'services/**'
      - '.github/**'
  pull_request:
    branches:
      - main
      - prod
    paths: 
      - 'services/**'
      - '.github/**'

jobs:
  select-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.select-environment.outputs.environment }}
    steps:
      - name: Check Required variables and secrets
        run: |
          if [[ -z "${{ secrets.DOCKERHUB_TOKEN }}" ]]; then
            echo "DOCKERHUB_TOKEN secret is missing";
            exit 1;
          fi
          if [[ -z "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}" ]]; then
            echo "FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 secret is missing";
            exit 1;
          fi
          if [[ -z "${{ secrets.LINODE_KUBECONFIG }}" ]]; then
            echo "LINODE_KUBECONFIG secret is missing";
            exit 1;
          fi

          if [[ -z "${{ vars.DOCKERHUB_REPO }}" ]]; then
            echo "DOCKERHUB_REPO variable is missing";
            exit 1;
          fi
          if [[ -z "${{ vars.DOCKERHUB_USERNAME }}" ]]; then
            echo "DOCKERHUB_USERNAME variable is missing";
            exit 1;
          fi
          if [[ -z "${{ vars.HELM_VERSION }}" ]]; then
            echo "HELM_VERSION variable is missing";
            exit 1;
          fi
      - name: Select Environment
        id: select-environment
        run: |
          if [[ ${{ github.ref_name }} == 'prod' ]]; then 
            echo "environment=prod" >> "$GITHUB_OUTPUT"
          elif [[ ${{ github.ref_name }} == 'main' ]]; then
            echo "environment=staging" >> "$GITHUB_OUTPUT"
          else 
            echo "environment=test" >> "$GITHUB_OUTPUT"
          fi

  build-and-push:
    name: Build and Push Docker Image
    needs: select-environment
    env: 
      ENVIRONMENT: ${{ needs.select-environment.outputs.environment }}
      IMAGE_REPO: "${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}"
      IMAGE_TAG: "${{ needs.select-environment.outputs.environment }}-${{ github.sha }}"
    defaults:
      run:
        working-directory: services/server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 
        with:
          sparse-checkout: |
            .github
            services
        
      - uses: azure/k8s-set-context@v4  
        with:
          kubeconfig: ${{ secrets.LINODE_KUBECONFIG }} # must be the kubeconfig itself, not the path to it

      - uses: azure/setup-helm@v4.1.0
        with:
          version: "${{ vars.HELM_VERSION }}"

      - name: Build the Docker Image # different FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 secret for prod and staging
        run: docker build -f Dockerfile.prod -t ${{ env.IMAGE }} --build-arg FIREBASE_SERVICE_ACCOUNT_KEY_BASE64=$( if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; else echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; fi ) .
        env:
          IMAGE: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

      - name: Login to Docker Hub 
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push the Docker Image 
        run: docker push ${{ env.IMAGE }}
        env:
          IMAGE: ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}

      - name: Adapt app version in Helm Chart 
        run: |
          sed -i'' \
          -e "s/APP_VERSION/${{ github.sha }}/g" \
          k8s/server/Chart.yaml

      - name: Apply Helm Chart
        run: |
          helm upgrade server-${{ env.ENVIRONMENT }} k8s/server \
          --install \
          --set image.repository=${{ env.IMAGE_REPO }} \
          --set image.tag=${{ env.IMAGE_TAG }} \
          --set secrets.dockerHubSecret.valueBase64="$(cat ~/.docker/config.json | base64 -w 0)" \
          --namespace=${{ env.ENVIRONMENT }}

      - name: Delete old Images on Docker Hub # different env vars (REGEX, DAYS_AGO, NTH_NEWEST)
        run: |
          if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          else
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          fi
        env:
          REGEX: "${{ env.ENVIRONMENT }}-"
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_REPO: ${{ vars.DOCKERHUB_REPO }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}