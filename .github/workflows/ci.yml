name: CI

on: 
  push:
    branches:
      - main
      - prod
      - feat-integrate-helm
    paths: 
      - 'services/**'
      - '.github/**'
  pull_request:
    branches:
      - main
      - prod
    paths: 
      - 'services/**'
      - '.github/**'

jobs:
  select-environment:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.select-environment.outputs.environment }}
    steps:
      - name: Select Environment
        id: select-environment
        run: |
          if [[ ${{ github.ref_name }} == 'prod' ]]; then 
            echo "environment=prod" >> "$GITHUB_OUTPUT"
          elif [[ ${{ github.ref_name }} == 'staging' ]]; then
            echo "environment=staging" >> "$GITHUB_OUTPUT"
          else 
            echo "environment=test" >> "$GITHUB_OUTPUT"
          fi

# TODO: add step to check if all variables and secrets are set
  build-and-push:
    name: Build and Push Docker Image
    needs: select-environment
    env: 
      ENVIRONMENT: ${{ needs.select-environment.outputs.environment }}
      IMAGE: "${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }}:${{ needs.select-environment.outputs.environment }}-${{ github.sha }}"
    defaults:
      run:
        working-directory: services/server
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4 
        with:
          sparse-checkout: |
            .github
            services
        
      - uses: azure/k8s-set-context@v4  
        with:
          kubeconfig: ${{ secrets.LINODE_KUBECONFIG }} # must be the kubeconfig itself, not the path to it

      - uses: azure/setup-helm@v4.1.0
        with:
          version: '3.14.3'

      - name: Build the Docker Image # different FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 secret for prod and staging
        run: docker build -f Dockerfile.prod -t ${{ env.IMAGE }} --build-arg FIREBASE_SERVICE_ACCOUNT_KEY_BASE64=$( if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; else echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY_BASE64 }}"; fi ) .

      - name: Login to Docker Hub 
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Push the Docker Image 
        run: docker push ${{ env.IMAGE }}
# get dockerhub secret value
# adapt app version in chart with sed and give sha as value
# apply helm chart

      - name: Adapt app version in Helm Chart 
        run: |
          sed -i'' \
          -e "s/APP_VERSION/${{ env.ENVIRONMENT }}-${{ github.sha }}/g" \
          k8s/server/Chart.yaml

      # TODO: namespace flag must be added -> --namespace="${{ env.ENVIRONMENT }}"
      - name: Apply Helm Chart
        run: helm upgrade --install server-${{ env.ENVIRONMENT }} k8s/server --set image.repository=${{ vars.DOCKERHUB_USERNAME }}/${{ vars.DOCKERHUB_REPO }} --set image.tag=${{ env.ENVIRONMENT }}-${{ github.sha }} --set secrets.dockerHubSecret.valueBase64="$(cat ~/.docker/config.json | base64 -w 0)" --namespace="default"

      # - name: Create Dockerhub secret # different namespace for prod and staging
      #   run: |
      #     sed -i'' \
      #     -e "s/DOCKERHUB_SECRET/$(cat ~/.docker/config.json | base64 -w 0)/g" \
      #     k8s/spaces-dockerhub_secret.yml
      #     kubectl apply -f k8s/spaces-dockerhub_secret.yml --namespace="${{ env.ENVIRONMENT }}"

      # - name: Apply Deployment # different namespace, deployment file for prod and staging
      #   run: |
      #     sed -i'' \
      #     -e "s|DOCKERHUB_IMAGE|${{ env.IMAGE }}|g" \
      #     "${{ env.DEPLOYMENT_MANIFEST_PATH }}"
      #     kubectl apply -f "${{ env.DEPLOYMENT_MANIFEST_PATH }}" --namespace="${{ env.ENVIRONMENT }}"
      #   env:
      #     DEPLOYMENT_MANIFEST_PATH: "k8s/${{ env.ENVIRONMENT }}/spaces_deploy.yml"

      # - name: Apply Service # different arguments to delete_old_images script for prod and staging
      #   run: kubectl apply -f k8s/spaces_svc.yml --namespace="${{ env.ENVIRONMENT }}"

      - name: Delete old Images on Docker Hub # different env vars (REGEX, DAYS_AGO, NTH_NEWEST)
        run: |
          if [[ ${{ env.ENVIRONMENT }} == 'prod' ]]; then
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          else
            /bin/bash bash_scripts/delete_old_images/delete_old_images.sh ${{ env.REGEX }} 50 5;
          fi
        env:
          REGEX: "${{ env.ENVIRONMENT }}-"
          DOCKERHUB_USERNAME: ${{ vars.DOCKERHUB_USERNAME }}
          DOCKERHUB_REPO: ${{ vars.DOCKERHUB_REPO }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_TOKEN }}